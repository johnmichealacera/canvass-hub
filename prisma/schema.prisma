// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  canvassRequests CanvassRequest[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  category    String
  imageUrl    String?
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  canvassItems CanvassItem[]

  @@map("products")
}

model CanvassRequest {
  id        String            @id @default(cuid())
  userId    String
  notes     String?
  pdfUrl    String?
  status    CanvassStatus     @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  canvassItems CanvassItem[]

  @@map("canvass_requests")
}

model CanvassItem {
  id        String @id @default(cuid())
  canvassId String
  productId String
  quantity  Int    @default(1)

  // Relations
  canvass CanvassRequest @relation(fields: [canvassId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([canvassId, productId])
  @@map("canvass_items")
}

enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum CanvassStatus {
  PENDING
  UNDER_REVIEW
  QUOTED
  APPROVED
  REJECTED
}
